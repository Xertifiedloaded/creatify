datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  username  String   @unique
  name      String
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  profile     Profile?
  projects    Project[]
  socials     Social[]
  links       Link[]
  experiences Experience[]
  education   Education[]
   pageViews   PageView[]
  skills      Skill[]  @relation("UserSkills") 
  stacks      Stack[]  @relation("UserStacks")  
}


model PageView {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  username  String
  period    String
  views     Int      @default(0)
  date      DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  user      User     @relation(fields: [username], references: [username])
  
  @@unique([username, period, date])
}


model Skill {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  level     String
  userId    String
  user      User     @relation("UserSkills", fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Stack {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  userId    String
  user      User     @relation("UserStacks", fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}





model Project {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  userId       String?  @db.ObjectId
  user         User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  title        String?
  description  String?
  technologies String[]
  link         String?
  githubLink   String?
  image        String?
}

model Profile {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  userId      String?  @unique @db.ObjectId
  user        User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  picture     String?
  tagline     String?
  bio         String?
  hobbies     String[]
  languages   String[]
  address     String?
  phoneNumber String?
}

model Link {
  id     String  @id @default(auto()) @map("_id") @db.ObjectId
  userId String? @db.ObjectId
  user   User?   @relation(fields: [userId], references: [id], onDelete: Cascade)

  url  String?
  text String?
}

model Social {
  id     String  @id @default(auto()) @map("_id") @db.ObjectId
  userId String? @db.ObjectId
  user   User?   @relation(fields: [userId], references: [id], onDelete: Cascade)

  name      String?
  link      String?
  isVisible Boolean @default(false)
}

model Experience {
  id     String  @id @default(auto()) @map("_id") @db.ObjectId
  userId String? @db.ObjectId
  user   User?   @relation(fields: [userId], references: [id], onDelete: Cascade)

  company     String?
  position    String?
  startDate   DateTime?
  endDate     DateTime?
  description String?
}

model Education {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  userId      String?   @db.ObjectId
  user        User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
  institution String?
  degree      String?
  startDate   DateTime?
  endDate     DateTime?
}
